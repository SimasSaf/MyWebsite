import * as THREE from "three";

export function createShaderMaterial() {
  return new THREE.ShaderMaterial({
    vertexShader: `
      varying vec3 vNormal;
      varying vec3 vViewDir;
      varying vec2 vUv;
      varying vec3 vWorldPos;

      uniform vec2 uCenter; // Click center
      uniform float uRadius; // Growing effect

      void main() {
        vUv = uv;
        vNormal = normalize(normalMatrix * normal);
        vec4 worldPosition = modelMatrix * vec4(position, 1.0);
        vViewDir = normalize(cameraPosition - worldPosition.xyz);
        vWorldPos = worldPosition.xyz;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,

    fragmentShader: `
      varying vec3 vNormal;
      varying vec3 vViewDir;
      varying vec2 vUv;
      varying vec3 vWorldPos;

      uniform vec3 uLightPos;
      uniform float uTime;
      uniform vec2 uCenter;
      uniform float uRadius;

      // Function for cel shading (hard edges)
      float getCelShading(vec3 normal, vec3 lightDir) {
        float brightness = dot(normalize(normal), normalize(lightDir));
        float levels = 4.0;
        return floor(brightness * levels) / levels;
      }

      // Creates diagonal hazard stripes (yellow & black)
      float hazardPattern(vec2 uv) {
        float angle = 1.2; // Rotation for diagonal stripes
        vec2 rotatedUV = vec2(
          uv.x * cos(angle) - uv.y * sin(angle),
          uv.x * sin(angle) + uv.y * cos(angle)
        );

        float stripes = mod(floor(rotatedUV.x * 15.0), 2.0); // Increase the multiplier for more stripes
        return stripes;
      }

      // Simulates edge detection (outlines)
      float edgeOutline(vec3 normal) {
        return smoothstep(0.3, 0.6, abs(dot(normal, vViewDir)));
      }

      void main() {
        vec3 lightDir = normalize(uLightPos);
        float brightness = getCelShading(vNormal, lightDir);

        // Hazard stripes pattern
        float stripes = hazardPattern(vUv);
        vec3 hazardColor = mix(vec3(1.0, 0.85, 0.0), vec3(0.0, 0.0, 0.0), stripes);

        // Add cel shading to the base hazard color
        vec3 baseColor = hazardColor * brightness;

        // Simulate dark outlines using normal edges
        float edgeFactor = edgeOutline(vNormal);
        vec3 outlinedColor = mix(baseColor, vec3(0.0, 0.0, 0.0), edgeFactor);

        // Expanding shader effect
        vec2 screenPos = (vWorldPos.xy + 1.0) * 0.5;
        float dist = length(screenPos - uCenter);
        float mask = smoothstep(uRadius * 0.5, uRadius, dist);

        // Apply expansion effect inside the circle
        vec3 finalColor = mix(vec3(0.5, 0.5, 0.5), outlinedColor, mask);

        gl_FragColor = vec4(finalColor, 1.0);
      }
    `,

    uniforms: {
      uLightPos: { value: new THREE.Vector3(2, 5, 3) }, // Light source position
      uTime: { value: 0.0 }, // Time for animation
      uCenter: { value: new THREE.Vector2(0.5, 0.5) }, // Click position (expansion center)
      uRadius: { value: 0.0 }, // Expansion radius
    },

    side: THREE.DoubleSide,
    depthWrite: true,
    depthTest: true,
  });
}
